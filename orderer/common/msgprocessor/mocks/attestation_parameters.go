// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"
)

type AttestationCheckingParameters struct {
	EnableCheckingStub        func() bool
	enableCheckingMutex       sync.RWMutex
	enableCheckingArgsForCall []struct {
	}
	enableCheckingReturns struct {
		result1 bool
	}
	enableCheckingReturnsOnCall map[int]struct {
		result1 bool
	}
	FrequencyStub        func() uint32
	frequencyMutex       sync.RWMutex
	frequencyArgsForCall []struct {
	}
	frequencyReturns struct {
		result1 uint32
	}
	frequencyReturnsOnCall map[int]struct {
		result1 uint32
	}
	RequiredNumberOfMessagesStub        func() uint32
	requiredNumberOfMessagesMutex       sync.RWMutex
	requiredNumberOfMessagesArgsForCall []struct {
	}
	requiredNumberOfMessagesReturns struct {
		result1 uint32
	}
	requiredNumberOfMessagesReturnsOnCall map[int]struct {
		result1 uint32
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *AttestationCheckingParameters) EnableChecking() bool {
	fake.enableCheckingMutex.Lock()
	ret, specificReturn := fake.enableCheckingReturnsOnCall[len(fake.enableCheckingArgsForCall)]
	fake.enableCheckingArgsForCall = append(fake.enableCheckingArgsForCall, struct {
	}{})
	stub := fake.EnableCheckingStub
	fakeReturns := fake.enableCheckingReturns
	fake.recordInvocation("EnableChecking", []interface{}{})
	fake.enableCheckingMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *AttestationCheckingParameters) EnableCheckingCallCount() int {
	fake.enableCheckingMutex.RLock()
	defer fake.enableCheckingMutex.RUnlock()
	return len(fake.enableCheckingArgsForCall)
}

func (fake *AttestationCheckingParameters) EnableCheckingCalls(stub func() bool) {
	fake.enableCheckingMutex.Lock()
	defer fake.enableCheckingMutex.Unlock()
	fake.EnableCheckingStub = stub
}

func (fake *AttestationCheckingParameters) EnableCheckingReturns(result1 bool) {
	fake.enableCheckingMutex.Lock()
	defer fake.enableCheckingMutex.Unlock()
	fake.EnableCheckingStub = nil
	fake.enableCheckingReturns = struct {
		result1 bool
	}{result1}
}

func (fake *AttestationCheckingParameters) EnableCheckingReturnsOnCall(i int, result1 bool) {
	fake.enableCheckingMutex.Lock()
	defer fake.enableCheckingMutex.Unlock()
	fake.EnableCheckingStub = nil
	if fake.enableCheckingReturnsOnCall == nil {
		fake.enableCheckingReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.enableCheckingReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *AttestationCheckingParameters) Frequency() uint32 {
	fake.frequencyMutex.Lock()
	ret, specificReturn := fake.frequencyReturnsOnCall[len(fake.frequencyArgsForCall)]
	fake.frequencyArgsForCall = append(fake.frequencyArgsForCall, struct {
	}{})
	stub := fake.FrequencyStub
	fakeReturns := fake.frequencyReturns
	fake.recordInvocation("Frequency", []interface{}{})
	fake.frequencyMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *AttestationCheckingParameters) FrequencyCallCount() int {
	fake.frequencyMutex.RLock()
	defer fake.frequencyMutex.RUnlock()
	return len(fake.frequencyArgsForCall)
}

func (fake *AttestationCheckingParameters) FrequencyCalls(stub func() uint32) {
	fake.frequencyMutex.Lock()
	defer fake.frequencyMutex.Unlock()
	fake.FrequencyStub = stub
}

func (fake *AttestationCheckingParameters) FrequencyReturns(result1 uint32) {
	fake.frequencyMutex.Lock()
	defer fake.frequencyMutex.Unlock()
	fake.FrequencyStub = nil
	fake.frequencyReturns = struct {
		result1 uint32
	}{result1}
}

func (fake *AttestationCheckingParameters) FrequencyReturnsOnCall(i int, result1 uint32) {
	fake.frequencyMutex.Lock()
	defer fake.frequencyMutex.Unlock()
	fake.FrequencyStub = nil
	if fake.frequencyReturnsOnCall == nil {
		fake.frequencyReturnsOnCall = make(map[int]struct {
			result1 uint32
		})
	}
	fake.frequencyReturnsOnCall[i] = struct {
		result1 uint32
	}{result1}
}

func (fake *AttestationCheckingParameters) RequiredNumberOfMessages() uint32 {
	fake.requiredNumberOfMessagesMutex.Lock()
	ret, specificReturn := fake.requiredNumberOfMessagesReturnsOnCall[len(fake.requiredNumberOfMessagesArgsForCall)]
	fake.requiredNumberOfMessagesArgsForCall = append(fake.requiredNumberOfMessagesArgsForCall, struct {
	}{})
	stub := fake.RequiredNumberOfMessagesStub
	fakeReturns := fake.requiredNumberOfMessagesReturns
	fake.recordInvocation("RequiredNumberOfMessages", []interface{}{})
	fake.requiredNumberOfMessagesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *AttestationCheckingParameters) RequiredNumberOfMessagesCallCount() int {
	fake.requiredNumberOfMessagesMutex.RLock()
	defer fake.requiredNumberOfMessagesMutex.RUnlock()
	return len(fake.requiredNumberOfMessagesArgsForCall)
}

func (fake *AttestationCheckingParameters) RequiredNumberOfMessagesCalls(stub func() uint32) {
	fake.requiredNumberOfMessagesMutex.Lock()
	defer fake.requiredNumberOfMessagesMutex.Unlock()
	fake.RequiredNumberOfMessagesStub = stub
}

func (fake *AttestationCheckingParameters) RequiredNumberOfMessagesReturns(result1 uint32) {
	fake.requiredNumberOfMessagesMutex.Lock()
	defer fake.requiredNumberOfMessagesMutex.Unlock()
	fake.RequiredNumberOfMessagesStub = nil
	fake.requiredNumberOfMessagesReturns = struct {
		result1 uint32
	}{result1}
}

func (fake *AttestationCheckingParameters) RequiredNumberOfMessagesReturnsOnCall(i int, result1 uint32) {
	fake.requiredNumberOfMessagesMutex.Lock()
	defer fake.requiredNumberOfMessagesMutex.Unlock()
	fake.RequiredNumberOfMessagesStub = nil
	if fake.requiredNumberOfMessagesReturnsOnCall == nil {
		fake.requiredNumberOfMessagesReturnsOnCall = make(map[int]struct {
			result1 uint32
		})
	}
	fake.requiredNumberOfMessagesReturnsOnCall[i] = struct {
		result1 uint32
	}{result1}
}

func (fake *AttestationCheckingParameters) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.enableCheckingMutex.RLock()
	defer fake.enableCheckingMutex.RUnlock()
	fake.frequencyMutex.RLock()
	defer fake.frequencyMutex.RUnlock()
	fake.requiredNumberOfMessagesMutex.RLock()
	defer fake.requiredNumberOfMessagesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *AttestationCheckingParameters) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
